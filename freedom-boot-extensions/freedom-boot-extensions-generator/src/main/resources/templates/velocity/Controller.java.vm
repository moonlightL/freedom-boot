package ${packageName}.${moduleName}.controller;

import ${packageName}.common.base.BaseController;
import ${packageName}.common.base.BaseRequest;
import ${packageName}.common.component.annotation.ActionLog;
import ${packageName}.common.constant.ActionEnum;
import ${packageName}.common.constant.ModuleEnum;
import ${packageName}.common.exception.GlobalException;
import ${packageName}.common.exception.GlobalExceptionEnum;
import ${packageName}.common.vo.Result;
import ${packageName}.${moduleName}.model.${className};
import ${packageName}.${moduleName}.model.dto.${className}DTO;
import ${packageName}.${moduleName}.model.vo.${className}VO;
import ${packageName}.${moduleName}.service.${className}Service;
import com.github.pagehelper.PageInfo;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


/**
 * @Author ${author}
 * @ClassName: ${className}Controller
 * @ProjectName ${ProjectName}
 * @Description: ${tableComment}控制器
 * @Date ${dateTime}
 */
@Controller
@RequestMapping("/${moduleName}/${variableName}")
public class ${className}Controller extends BaseController {

    @Autowired
    private ${className}Service ${variableName}Service;

    //#########################################【页面请求】##################################################

    /**
     * 新增页面
     * @param resultMap
     * @return
     * @throws GlobalException
     */
    @GetMapping("/saveUI.html")
    @RequiresPermissions("${moduleName}:${variableName}:save")
    public String saveUI(Map<String,Object> resultMap) throws GlobalException {
        return render(SAVE_PAGE, resultMap);
    }

    /**
     * 修改页面
     * @param id
     * @param resultMap
     * @return
     * @throws GlobalException
     */
    @GetMapping("/updateUI/{id}.html")
    @RequiresPermissions("${moduleName}:${variableName}:update")
    public String updateUI(@PathVariable("id") Long id, Map<String,Object> resultMap) throws GlobalException {
            ${className}VO vo = this.${variableName}Service.getById(id);
        if (vo == null) {
            throw new GlobalException(GlobalExceptionEnum.ERROR_USER_NOT_EXIST);
        }

        resultMap.put("vo", vo);
        resultMap.put("readOnly", false);
        return render(UPDATE_PAGE, resultMap);
    }

    /**
     * 列表页面
     * @param resultMap
     * @return
     * @throws GlobalException
     */
    @GetMapping("/listUI.html")
    @RequiresPermissions("${moduleName}:${variableName}:listUI")
    public String listUI(Map<String,Object> resultMap) throws GlobalException {
        return render(LIST_PAGE, resultMap);
    }

    /**
     * 详情页面
     * @param id
     * @param resultMap
     * @return
     * @throws GlobalException
     */
    @GetMapping("/detailUI/{id}.html")
    @RequiresPermissions("${moduleName}:${variableName}:query")
    public String detailUI(@PathVariable("id") Long id, Map<String,Object> resultMap) throws GlobalException {
            ${className}VO vo = this.${variableName}Service.getById(id);
        if (vo == null) {
            throw new GlobalException(GlobalExceptionEnum.ERROR_USER_NOT_EXIST);
        }

        resultMap.put("vo", vo);
        resultMap.put("readOnly", true);
        return render(DETAIL_PAGE, resultMap);
    }

    //#########################################【AJAX 请求】##################################################

    @PostMapping("/save.json")
    @RequiresPermissions("${moduleName}:${variableName}:save")
    @ResponseBody
    @ActionLog(value="新增", moduleName = ModuleEnum.SYSTEM, actionType = ActionEnum.SAVE)
    public Result save(@Validated(BaseRequest.Save.class) ${className}DTO ${variableName}Dto) throws GlobalException {
        ${className} ${variableName} = ${variableName}Dto.toBo(${className}.class);
        return this.${variableName}Service.save(${variableName}) > 0 ? Result.success() : Result.fail();
    }

    @PostMapping("/remove.json")
    @RequiresPermissions("${moduleName}:${variableName}:remove")
    @ResponseBody
    @ActionLog(value="删除", moduleName = ModuleEnum.SYSTEM, actionType = ActionEnum.REMOVE)
    public Result remove(@RequestParam String idStr) throws GlobalException {
        String[] idArr = idStr.split(",");
        int num;
        if (idArr.length == 1) {
            num = this.${variableName}Service.remove(Long.valueOf(idArr[0]));
        } else {
            String[] idStrArr = idStr.split(",");
            List<Long> idList = new ArrayList<>(idStr.length());
            Arrays.stream(idStrArr).forEach(i -> idList.add(Long.valueOf(i)));
            num = this.${variableName}Service.removeBatch(idList);
        }
        return num > 0 ? Result.success() : Result.fail();
    }

    @PostMapping("/update.json")
    @RequiresPermissions("${moduleName}:${variableName}:update")
    @ResponseBody
    @ActionLog(value="编辑", moduleName = ModuleEnum.SYSTEM, actionType = ActionEnum.UPDATE)
    public Result update(@Validated(BaseRequest.Update.class) ${className}DTO ${variableName}DTO) throws GlobalException {
        ${className}VO dbData = this.${variableName}Service.getById(${variableName}DTO.getId());
        if (dbData == null) {
            throw new GlobalException(GlobalExceptionEnum.ERROR_USER_NOT_EXIST);
        }

        ${className} ${variableName} = ${variableName}DTO.toBo(${className}.class);
        return this.${variableName}Service.update(${variableName}) > 0 ? Result.success() : Result.fail();
    }

    @GetMapping("/list.json")
    @RequiresPermissions("${moduleName}:${variableName}:listUI")
    @ResponseBody
    public Result list(@Validated(BaseRequest.Query.class) ${className}DTO params) throws GlobalException {
        PageInfo<${className}VO> pageInfo = this.${variableName}Service.page(params);
        return Result.success(pageInfo);
    }

}
